{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "deposit"
      ],
      "properties": {
        "deposit": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "redeem"
      ],
      "properties": {
        "redeem": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "borrow"
      ],
      "properties": {
        "borrow": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "repay"
      ],
      "properties": {
        "repay": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "liquidation"
      ],
      "properties": {
        "liquidation": {
          "type": "object",
          "required": [
            "user"
          ],
          "properties": {
            "user": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_price"
      ],
      "properties": {
        "update_price": {
          "type": "object",
          "properties": {
            "denom": {
              "type": [
                "string",
                "null"
              ]
            },
            "price": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint128",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_reserve_configuration"
      ],
      "properties": {
        "set_reserve_configuration": {
          "type": "object",
          "required": [
            "denom",
            "liquidation_threshold",
            "loan_to_value_ratio"
          ],
          "properties": {
            "denom": {
              "type": "string"
            },
            "liquidation_threshold": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "loan_to_value_ratio": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_token_interest_rate_model_params"
      ],
      "properties": {
        "set_token_interest_rate_model_params": {
          "type": "object",
          "required": [
            "denom",
            "min_interest_rate",
            "optimal_utilisation_ratio",
            "rate_growth_factor",
            "safe_borrow_max_rate"
          ],
          "properties": {
            "denom": {
              "type": "string"
            },
            "min_interest_rate": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "optimal_utilisation_ratio": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "rate_growth_factor": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "safe_borrow_max_rate": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_markets"
      ],
      "properties": {
        "add_markets": {
          "type": "object",
          "required": [
            "decimals",
            "denom",
            "liquidation_threshold",
            "loan_to_value_ratio",
            "min_interest_rate",
            "name",
            "optimal_utilisation_ratio",
            "rate_growth_factor",
            "safe_borrow_max_rate",
            "symbol"
          ],
          "properties": {
            "cw20_address": {
              "type": [
                "string",
                "null"
              ]
            },
            "decimals": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "denom": {
              "type": "string"
            },
            "liquidation_threshold": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "loan_to_value_ratio": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "min_interest_rate": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "name": {
              "type": "string"
            },
            "optimal_utilisation_ratio": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "rate_growth_factor": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "safe_borrow_max_rate": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "symbol": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "toggle_collateral_setting"
      ],
      "properties": {
        "toggle_collateral_setting": {
          "type": "object",
          "required": [
            "denom"
          ],
          "properties": {
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_pyth_contract"
      ],
      "properties": {
        "update_pyth_contract": {
          "type": "object",
          "required": [
            "pyth_contract_addr"
          ],
          "properties": {
            "pyth_contract_addr": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_price_updater_addr"
      ],
      "properties": {
        "update_price_updater_addr": {
          "type": "object",
          "required": [
            "price_updater_addr"
          ],
          "properties": {
            "price_updater_addr": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_price_feed_ids"
      ],
      "properties": {
        "add_price_feed_ids": {
          "type": "object",
          "required": [
            "price_ids"
          ],
          "properties": {
            "price_ids": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/Identifier"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_admin"
      ],
      "properties": {
        "update_admin": {
          "type": "object",
          "required": [
            "admin"
          ],
          "properties": {
            "admin": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_supported_token"
      ],
      "properties": {
        "remove_supported_token": {
          "type": "object",
          "required": [
            "denom"
          ],
          "properties": {
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_price_feed_id"
      ],
      "properties": {
        "remove_price_feed_id": {
          "type": "object",
          "required": [
            "denom"
          ],
          "properties": {
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_pause"
      ],
      "properties": {
        "set_pause": {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Identifier": {
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
